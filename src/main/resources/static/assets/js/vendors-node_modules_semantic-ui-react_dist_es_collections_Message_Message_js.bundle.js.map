{"version":3,"file":"vendors-node_modules_semantic-ui-react_dist_es_collections_Message_Message_js.bundle.js","mappings":"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","sources":["webpack://messaging/./node_modules/semantic-ui-react/dist/es/collections/Message/Message.js","webpack://messaging/./node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js","webpack://messaging/./node_modules/semantic-ui-react/dist/es/collections/Message/MessageHeader.js","webpack://messaging/./node_modules/semantic-ui-react/dist/es/collections/Message/MessageItem.js","webpack://messaging/./node_modules/semantic-ui-react/dist/es/collections/Message/MessageList.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _without from \"lodash-es/without\";\nimport _isNil from \"lodash-es/isNil\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLParagraph, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\nimport Icon from '../../elements/Icon';\nimport MessageContent from './MessageContent';\nimport MessageHeader from './MessageHeader';\nimport MessageList from './MessageList';\nimport MessageItem from './MessageItem';\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\nvar Message = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Message, _Component);\n\n  function Message() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleDismiss = function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Message.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        attached = _this$props.attached,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        compact = _this$props.compact,\n        content = _this$props.content,\n        error = _this$props.error,\n        floating = _this$props.floating,\n        header = _this$props.header,\n        hidden = _this$props.hidden,\n        icon = _this$props.icon,\n        info = _this$props.info,\n        list = _this$props.list,\n        negative = _this$props.negative,\n        onDismiss = _this$props.onDismiss,\n        positive = _this$props.positive,\n        size = _this$props.size,\n        success = _this$props.success,\n        visible = _this$props.visible,\n        warning = _this$props.warning;\n    var classes = cx('ui', color, size, useKeyOnly(compact, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);\n    var dismissIcon = onDismiss && /*#__PURE__*/React.createElement(Icon, {\n      name: \"close\",\n      onClick: this.handleDismiss\n    });\n    var rest = getUnhandledProps(Message, this.props);\n    var ElementType = getElementType(Message, this.props);\n\n    if (!childrenUtils.isNil(children)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), dismissIcon, children);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), dismissIcon, Icon.create(icon, {\n      autoGenerateKey: false\n    }), (!_isNil(header) || !_isNil(content) || !_isNil(list)) && /*#__PURE__*/React.createElement(MessageContent, null, MessageHeader.create(header, {\n      autoGenerateKey: false\n    }), MessageList.create(list, {\n      autoGenerateKey: false\n    }), createHTMLParagraph(content, {\n      autoGenerateKey: false\n    })));\n  };\n\n  return Message;\n}(Component);\n\nMessage.handledProps = [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"];\nexport { Message as default };\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A message can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: PropTypes.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: PropTypes.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: PropTypes.bool,\n\n  /** A message can contain an icon. */\n  icon: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.bool]),\n\n  /** A message may be formatted to display information. */\n  info: PropTypes.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: PropTypes.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: PropTypes.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: PropTypes.bool,\n\n  /** A message can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: PropTypes.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: PropTypes.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: PropTypes.bool\n} : {};\nMessage.Content = MessageContent;\nMessage.Header = MessageHeader;\nMessage.List = MessageList;\nMessage.Item = MessageItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a header.\n */\n\nfunction MessageHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(MessageHeader, props);\n  var ElementType = getElementType(MessageHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageHeader.create = createShorthandFactory(MessageHeader, function (val) {\n  return {\n    content: val\n  };\n});\nexport default MessageHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message list can contain an item.\n */\n\nfunction MessageItem(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageItem, props);\n  var ElementType = getElementType(MessageItem, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageItem.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageItem.defaultProps = {\n  as: 'li'\n};\nMessageItem.create = createShorthandFactory(MessageItem, function (content) {\n  return {\n    content: content\n  };\n});\nexport default MessageItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport MessageItem from './MessageItem';\n/**\n * A message can contain a list of items.\n */\n\nfunction MessageList(props) {\n  var children = props.children,\n      className = props.className,\n      items = props.items;\n  var classes = cx('list', className);\n  var rest = getUnhandledProps(MessageList, props);\n  var ElementType = getElementType(MessageList, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? _map(items, MessageItem.create) : children);\n}\n\nMessageList.handledProps = [\"as\", \"children\", \"className\", \"items\"];\nMessageList.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand Message.Items. */\n  items: customPropTypes.collectionShorthand\n} : {};\nMessageList.defaultProps = {\n  as: 'ul'\n};\nMessageList.create = createShorthandFactory(MessageList, function (val) {\n  return {\n    items: val\n  };\n});\nexport default MessageList;"],"names":[],"sourceRoot":""}